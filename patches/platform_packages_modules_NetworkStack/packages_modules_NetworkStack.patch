diff --git a/res/values-mcc460/config.xml b/res/values-mcc460/config.xml
index 3c4b4933..0d75f508 100644
--- a/res/values-mcc460/config.xml
+++ b/res/values-mcc460/config.xml
@@ -11,14 +11,14 @@
          config_captive_portal_http_url and *NOT* by changing or overlaying
          this resource. It will break if the enforcement of overlayable starts.
          -->
-    <string name="default_captive_portal_http_url" translatable="false">http://connectivitycheck.gstatic.cn/generate_204</string>
+    <string name="default_captive_portal_http_url" translatable="false">https://captiveportal.kuketz.de/generate_204</string>
     <!-- default_captive_portal_https_url is not configured as overlayable so
          OEMs that wish to change captive_portal_https_url configuration must
          do so via configuring runtime resource overlay to
          config_captive_portal_https_url and *NOT* by changing or overlaying
          this resource. It will break if the enforcement of overlayable starts.
          -->
-    <string name="default_captive_portal_https_url" translatable="false">https://connectivitycheck.gstatic.cn/generate_204</string>
+    <string name="default_captive_portal_https_url" translatable="false">https://captiveportal.kuketz.de/generate_204</string>
     <!-- default_captive_portal_fallback_urls is not configured as overlayable
          so OEMs that wish to change captive_portal_fallback_urls configuration
          must do so via configuring runtime resource overlay to
@@ -26,6 +26,6 @@
          this resource. It will break if the enforcement of overlayable starts.
          -->
     <string-array name="default_captive_portal_fallback_urls" translatable="false">
-        <item>http://www.googleapis.cn/generate_204</item>
+        <item>https://captiveportal.kuketz.de/generate_204</item>
     </string-array>
 </resources>
diff --git a/res/values/config.xml b/res/values/config.xml
index 805ca041..5dbf78dc 100644
--- a/res/values/config.xml
+++ b/res/values/config.xml
@@ -13,7 +13,7 @@
          config_captive_portal_http_url and *NOT* by changing or overlaying
          this resource. It will break if the enforcement of overlayable starts.
          -->
-    <string name="default_captive_portal_http_url" translatable="false">http://connectivitycheck.gstatic.com/generate_204</string>
+    <string name="default_captive_portal_http_url" translatable="false">https://captiveportal.kuketz.de/generate_204</string>
     <!-- HTTPS URL for network validation, to use for confirming internet connectivity. -->
     <!-- default_captive_portal_https_url is not configured as overlayable so
          OEMs that wish to change captive_portal_https_url configuration must
@@ -21,7 +21,7 @@
          config_captive_portal_https_url and *NOT* by changing or overlaying
          this resource. It will break if the enforcement of overlayable starts.
          -->
-    <string name="default_captive_portal_https_url" translatable="false">https://www.google.com/generate_204</string>
+    <string name="default_captive_portal_https_url" translatable="false">https://captiveportal.kuketz.de/generate_204</string>
 
     <!-- List of fallback URLs to use for detecting captive portals. -->
     <!-- default_captive_portal_fallback_urls is not configured as overlayable
@@ -31,8 +31,8 @@
          this resource. It will break if the enforcement of overlayable starts.
          -->
     <string-array name="default_captive_portal_fallback_urls" translatable="false">
-        <item>http://www.google.com/gen_204</item>
-        <item>http://play.googleapis.com/generate_204</item>
+        <item>https://captiveportal.kuketz.de/gen_204</item>
+        <item>http://ecloud.global/generate_204</item>
     </string-array>
     <!-- Configuration hooks for the above settings.
          Empty by default but may be overridden by RROs. -->
diff --git a/src/android/net/util/NetworkStackUtils.java b/src/android/net/util/NetworkStackUtils.java
index 6dc2a5bf..533ee27f 100755
--- a/src/android/net/util/NetworkStackUtils.java
+++ b/src/android/net/util/NetworkStackUtils.java
@@ -165,14 +165,14 @@ public class NetworkStackUtils {
      * The default list of HTTP URLs to use for detecting captive portals.
      */
     public static final String[] DEFAULT_CAPTIVE_PORTAL_HTTP_URLS =
-            new String [] {"http://connectivitycheck.gstatic.com/generate_204"};
+            new String [] {"hhttps://captiveportal.kuketz.de/_204"};
 
     /**
      * The default list of HTTPS URLs for network validation, to use for confirming internet
      * connectivity.
      */
     public static final String[] DEFAULT_CAPTIVE_PORTAL_HTTPS_URLS =
-            new String [] {"https://www.google.com/generate_204"};
+            new String [] {"https://captiveportal.kuketz.de/generate_204"};
 
     /**
      * @deprecated Considering boolean experiment flag is likely to cause misconfiguration
diff --git a/tests/unit/src/com/android/server/connectivity/NetworkMonitorTest.java b/tests/unit/src/com/android/server/connectivity/NetworkMonitorTest.java
index f83c02f6..9a840d22 100644
--- a/tests/unit/src/com/android/server/connectivity/NetworkMonitorTest.java
+++ b/tests/unit/src/com/android/server/connectivity/NetworkMonitorTest.java
@@ -266,21 +266,21 @@ public class NetworkMonitorTest {
 
     private static final int TEST_NETID = 4242;
     private static final int TEST_NETID2 = 2121;
-    private static final String TEST_HTTP_URL = "http://www.google.com/gen_204";
-    private static final String TEST_HTTP_OTHER_URL1 = "http://other1.google.com/gen_204";
-    private static final String TEST_HTTP_OTHER_URL2 = "http://other2.google.com/gen_204";
-    private static final String TEST_HTTPS_URL = "https://www.google.com/gen_204";
-    private static final String TEST_HTTPS_OTHER_URL1 = "https://other1.google.com/gen_204";
-    private static final String TEST_HTTPS_OTHER_URL2 = "https://other2.google.com/gen_204";
-    private static final String TEST_FALLBACK_URL = "http://fallback.google.com/gen_204";
-    private static final String TEST_OTHER_FALLBACK_URL = "http://otherfallback.google.com/gen_204";
-    private static final String TEST_INVALID_OVERRIDE_URL = "https://override.example.com/test";
+    private static final String TEST_HTTP_URL = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_HTTP_OTHER_URL1 = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_HTTP_OTHER_URL2 = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_HTTPS_URL = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_HTTPS_OTHER_URL1 = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_HTTPS_OTHER_URL2 = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_FALLBACK_URL = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_OTHER_FALLBACK_URL = "https://captiveportal.kuketz.de/generate_204";
+    private static final String TEST_INVALID_OVERRIDE_URL = "https://leos-gsi.de/test";
     private static final String TEST_OVERRIDE_URL = "http://localhost:12345/test";
-    private static final String TEST_CAPPORT_API_URL = "https://capport.example.com/api";
-    private static final String TEST_LOGIN_URL = "https://testportal.example.com/login";
-    private static final String TEST_VENUE_INFO_URL = "https://venue.example.com/info";
+    private static final String TEST_CAPPORT_API_URL = "https://capport.example.de/api";
+    private static final String TEST_LOGIN_URL = "https://leos-cloud.de/login";
+    private static final String TEST_VENUE_INFO_URL = "https://leos-cloud.de/info";
     private static final String TEST_SPEED_TEST_URL = "https://speedtest.example.com";
-    private static final String TEST_RELATIVE_URL = "/test/relative/gen_204";
+    private static final String TEST_RELATIVE_URL = "/test/relative/gen_205";
     private static final String TEST_MCCMNC = "123456";
     private static final String TEST_FRIENDLY_NAME = "Friendly Name";
     private static final String[] TEST_HTTP_URLS = {TEST_HTTP_OTHER_URL1, TEST_HTTP_OTHER_URL2};
@@ -291,7 +291,7 @@ public class NetworkMonitorTest {
     private static final int TEST_SIGNAL_STRENGTH = -100;
     private static final int VALIDATION_RESULT_INVALID = 0;
     private static final int VALIDATION_RESULT_PORTAL = 0;
-    private static final String TEST_REDIRECT_URL = "android.com";
+    private static final String TEST_REDIRECT_URL = "leos-gsi.de";
     private static final int PROBES_PRIVDNS_VALID = NETWORK_VALIDATION_PROBE_DNS
             | NETWORK_VALIDATION_PROBE_HTTPS | NETWORK_VALIDATION_PROBE_PRIVDNS;
 
@@ -1603,7 +1603,7 @@ public class NetworkMonitorTest {
     private void setupFallbackSpec() throws IOException {
         setFallbackSpecs("http://example.com@@/@@204@@/@@"
                 + "@@,@@"
-                + TEST_OTHER_FALLBACK_URL + "@@/@@30[12]@@/@@https://(www\\.)?google.com/?.*");
+                + TEST_OTHER_FALLBACK_URL + "@@/@@30[12]@@/@@https://(www\\.)?leos-gsi.de/?.*");
 
         setSslException(mHttpsConnection);
         setStatus(mHttpConnection, 500);
@@ -1615,7 +1615,7 @@ public class NetworkMonitorTest {
     @Test
     public void testIsCaptivePortal_FallbackSpecIsFail() throws Exception {
         setupFallbackSpec();
-        set302(mOtherFallbackConnection, "https://www.google.com/test?q=3");
+        set302(mOtherFallbackConnection, "https://www.leos-gsi.de/test?q=3");
 
         runNetworkTest(VALIDATION_RESULT_INVALID,
                 NETWORK_VALIDATION_PROBE_DNS | NETWORK_VALIDATION_PROBE_FALLBACK,
@@ -2083,9 +2083,9 @@ public class NetworkMonitorTest {
         setStatus(mHttpConnection, 204);
 
         // Verify dns query only get v6 address.
-        mFakeDns.setAnswer("dns6.google", new String[]{"2001:db8::53"}, TYPE_AAAA);
+        mFakeDns.setAnswer("dns6.quad9", new String[]{"2001:db8::53"}, TYPE_AAAA);
         WrappedNetworkMonitor wnm = makeCellNotMeteredNetworkMonitor();
-        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("dns6.google",
+        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("dns6.quad9",
                 new InetAddress[0]));
         notifyNetworkConnected(wnm, CELL_NOT_METERED_CAPABILITIES);
         verifyNetworkTested(NETWORK_VALIDATION_RESULT_VALID, PROBES_PRIVDNS_VALID);
@@ -2094,8 +2094,8 @@ public class NetworkMonitorTest {
 
         // Verify dns query only get v4 address.
         resetCallbacks();
-        mFakeDns.setAnswer("dns4.google", new String[]{"192.0.2.1"}, TYPE_A);
-        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("dns4.google",
+        mFakeDns.setAnswer("quad9", new String[]{"192.0.2.1"}, TYPE_A);
+        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("quad9",
                 new InetAddress[0]));
         verifyNetworkTested(NETWORK_VALIDATION_RESULT_VALID, PROBES_PRIVDNS_VALID);
         // NetworkMonitor will check if the probes has changed or not, if the probes has not
@@ -2105,9 +2105,9 @@ public class NetworkMonitorTest {
 
         // Verify dns query get both v4 and v6 address.
         resetCallbacks();
-        mFakeDns.setAnswer("dns.google", new String[]{"2001:db8::54"}, TYPE_AAAA);
-        mFakeDns.setAnswer("dns.google", new String[]{"192.0.2.3"}, TYPE_A);
-        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("dns.google", new InetAddress[0]));
+        mFakeDns.setAnswer("quad9", new String[]{"2001:db8::54"}, TYPE_AAAA);
+        mFakeDns.setAnswer("quad9", new String[]{"192.0.2.3"}, TYPE_A);
+        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("quad9", new InetAddress[0]));
         verifyNetworkTested(NETWORK_VALIDATION_RESULT_VALID, PROBES_PRIVDNS_VALID);
         verify(mCallbacks, never()).notifyProbeStatusChanged(
                 eq(PROBES_PRIVDNS_VALID), eq(PROBES_PRIVDNS_VALID));
@@ -2120,7 +2120,7 @@ public class NetworkMonitorTest {
         setStatus(mHttpConnection, 204);
 
         WrappedNetworkMonitor wnm = makeCellNotMeteredNetworkMonitor();
-        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("dns.google", new InetAddress[0]));
+        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("quad9", new InetAddress[0]));
         notifyNetworkConnected(wnm, CELL_NOT_METERED_CAPABILITIES);
         verifyNetworkTested(VALIDATION_RESULT_INVALID,
                 NETWORK_VALIDATION_PROBE_DNS | NETWORK_VALIDATION_PROBE_HTTPS);
@@ -2129,7 +2129,7 @@ public class NetworkMonitorTest {
                 | NETWORK_VALIDATION_PROBE_HTTPS));
         // Fix DNS and retry, expect validation to succeed.
         resetCallbacks();
-        mFakeDns.setAnswer("dns.google", new String[]{"2001:db8::1"}, TYPE_AAAA);
+        mFakeDns.setAnswer("quad9", new String[]{"2001:db8::1"}, TYPE_AAAA);
 
         wnm.forceReevaluation(Process.myUid());
         // ProbeCompleted should be reset to 0
@@ -2147,7 +2147,7 @@ public class NetworkMonitorTest {
         setStatus(mHttpConnection, 204);
 
         WrappedNetworkMonitor wnm = makeCellNotMeteredNetworkMonitor();
-        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("dns.google", new InetAddress[0]));
+        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("quad9", new InetAddress[0]));
         notifyNetworkConnected(wnm, CELL_NOT_METERED_CAPABILITIES);
         verifyNetworkTested(VALIDATION_RESULT_INVALID,
                 NETWORK_VALIDATION_PROBE_DNS | NETWORK_VALIDATION_PROBE_HTTPS);
@@ -2157,7 +2157,7 @@ public class NetworkMonitorTest {
 
         // Fix DNS and retry, expect validation to succeed.
         resetCallbacks();
-        mFakeDns.setAnswer("dns.google", new String[]{"2001:db8::1"}, TYPE_AAAA);
+        mFakeDns.setAnswer("quad9", new String[]{"2001:db8::1"}, TYPE_AAAA);
 
         wnm.forceReevaluation(Process.myUid());
         verify(mCallbacks, timeout(HANDLER_TIMEOUT_MS).atLeastOnce())
@@ -2183,7 +2183,7 @@ public class NetworkMonitorTest {
         // Expect validation to fail.
         resetCallbacks();
         mFakeDns.setNonBypassPrivateDnsWorking(false);
-        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("dns.google",
+        wnm.notifyPrivateDnsSettingsChanged(new PrivateDnsConfig("quad9",
                 new InetAddress[0]));
         verifyNetworkTested(VALIDATION_RESULT_INVALID,
                 NETWORK_VALIDATION_PROBE_DNS | NETWORK_VALIDATION_PROBE_HTTPS);
