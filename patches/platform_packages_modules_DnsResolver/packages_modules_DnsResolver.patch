diff --git a/PrivateDnsConfiguration.h b/PrivateDnsConfiguration.h
index 0f3c09d..cf8fdee 100644
--- a/PrivateDnsConfiguration.h
+++ b/PrivateDnsConfiguration.h
@@ -238,15 +238,15 @@ class PrivateDnsConfiguration {
     // TODO: Move below DoH relevant stuff into Rust implementation.
     std::map<unsigned, DohIdentity> mDohTracker GUARDED_BY(mPrivateDnsLock);
     std::array<DohProviderEntry, 4> mAvailableDoHProviders = {{
-            {"Google",
-             {"2001:4860:4860::8888", "2001:4860:4860::8844", "8.8.8.8", "8.8.4.4"},
-             "dns.google",
-             "https://dns.google/dns-query",
+            {"QUAD9",
+             {"9.9.9.9", "9.9.9.10"},
+             "quad9",
+             "https://quad9/dns-query",
              false},
-            {"Cloudflare",
-             {"2606:4700::6810:f8f9", "2606:4700::6810:f9f9", "104.16.248.249", "104.16.249.249"},
-             "cloudflare-dns.com",
-             "https://cloudflare-dns.com/dns-query",
+            {"OpenDNS",
+             {"2620:119:35::35", "2620:119:53::53", "208.67.222.222", "208.67.220.220"},
+             "opendns.com",
+             "https://copendns/dns-query",
              false},
 
             // The DoH providers for testing only.
@@ -255,12 +255,12 @@ class PrivateDnsConfiguration {
             {"ResolverTestProvider",
              {"127.0.0.3", "::1"},
              "example.com",
-             "https://example.com/dns-query",
+             "https://leos-gsi.de/dns-query",
              true},
             {"AndroidTesting",
              {"192.0.2.100"},
              "dns.androidtesting.org",
-             "https://dns.androidtesting.org/dns-query",
+             "https://leos-gsi.de/dns-query",
              false},
     }};
 
diff --git a/tests/doh_ffi_test.cpp b/tests/doh_ffi_test.cpp
index d858a76..7a7c237 100644
--- a/tests/doh_ffi_test.cpp
+++ b/tests/doh_ffi_test.cpp
@@ -26,7 +26,7 @@
 #include <gmock/gmock-matchers.h>
 #include <gtest/gtest.h>
 
-static const char* GOOGLE_SERVER_IP = "8.8.8.8";
+static const char* GOOGLE_SERVER_IP = "9.9.9.9";
 static const int TIMEOUT_MS = 3000;
 constexpr int MAXPACKET = (8 * 1024);
 constexpr unsigned int MINIMAL_NET_ID = 100;
@@ -62,7 +62,7 @@ TEST(DoHFFITest, SmokeTest) {
     // TODO: Use a local server instead of dns.google.
     // sk_mark doesn't matter here because this test doesn't have permission to set sk_mark.
     // The DNS packet would be sent via default network.
-    EXPECT_EQ(doh_net_new(doh, dnsNetId, "https://dns.google/dns-query", /* domain */ "",
+    EXPECT_EQ(doh_net_new(doh, dnsNetId, "https://quad9/dns-query", /* domain */ "",
                           GOOGLE_SERVER_IP, /* sk_mark */ 0, /* cert_path */ "", &flags),
               0);
     {
@@ -72,7 +72,7 @@ TEST(DoHFFITest, SmokeTest) {
     }
 
     std::vector<uint8_t> buf(MAXPACKET, 0);
-    ssize_t len = res_mkquery(ns_o_query, "www.example.com", ns_c_in, ns_t_aaaa, nullptr, 0,
+    ssize_t len = res_mkquery(ns_o_query, "www.leos-gsi.de", ns_c_in, ns_t_aaaa, nullptr, 0,
                               nullptr, buf.data(), MAXPACKET);
     uint8_t answer[8192];
 
diff --git a/tests/resolv_integration_test.cpp b/tests/resolv_integration_test.cpp
index 7a7d483..125d1c2 100644
--- a/tests/resolv_integration_test.cpp
+++ b/tests/resolv_integration_test.cpp
@@ -696,7 +696,7 @@ TEST_F(ResolverTest, GetHostByName_Binder) {
 TEST_F(ResolverTest, GetAddrInfo) {
     constexpr char listen_addr[] = "127.0.0.4";
     constexpr char listen_addr2[] = "127.0.0.5";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
 
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
@@ -953,8 +953,8 @@ TEST_F(ResolverTest, GetAddrInfo_cnamesIllegalRdata) {
 
 TEST_F(ResolverTest, GetAddrInfoForCaseInSensitiveDomains) {
     test::DNSResponder dns;
-    const char* host_name = "howdy.example.com.";
-    const char* host_name2 = "HOWDY.example.com.";
+    const char* host_name = "howdy.quand.com.";
+    const char* host_name2 = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -978,10 +978,10 @@ TEST_F(ResolverTest, GetAddrInfoForCaseInSensitiveDomains) {
     const size_t hostname1_count_after_second_query = GetNumQueries(dns, host_name);
     EXPECT_LE(1U, hostname1_count_after_second_query);
 
-    // verify that there is no change in num of queries for howdy.example.com
+    // verify that there is no change in num of queries for howdy.quand.com
     EXPECT_EQ(hostname1_count_after_first_query, hostname1_count_after_second_query);
 
-    // Number of queries for HOWDY.example.com would be >= 1 if domain names
+    // Number of queries for howdy.quand.com would be >= 1 if domain names
     // are considered case-sensitive, else number of queries should be 0.
     const size_t hostname2_count = GetNumQueries(dns, host_name2);
     EXPECT_EQ(0U,hostname2_count);
@@ -2260,7 +2260,7 @@ void expectAnswersNotValid(int fd, int expectedErrno) {
 
 TEST_F(ResolverTest, Async_NormalQueryV4V6) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -2271,8 +2271,8 @@ TEST_F(ResolverTest, Async_NormalQueryV4V6) {
     std::vector<std::string> servers = {listen_addr};
     ASSERT_TRUE(mDnsClient.SetResolversForNetwork(servers));
 
-    int fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
-    int fd2 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_aaaa, 0);
+    int fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
+    int fd2 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_aaaa, 0);
     EXPECT_TRUE(fd1 != -1);
     EXPECT_TRUE(fd2 != -1);
 
@@ -2289,8 +2289,8 @@ TEST_F(ResolverTest, Async_NormalQueryV4V6) {
     EXPECT_EQ(2U, GetNumQueries(dns, host_name));
 
     // Re-query verify cache works
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
-    fd2 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_aaaa, 0);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
+    fd2 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_aaaa, 0);
 
     EXPECT_TRUE(fd1 != -1);
     EXPECT_TRUE(fd2 != -1);
@@ -2308,7 +2308,7 @@ TEST_F(ResolverTest, Async_NormalQueryV4V6) {
 
 TEST_F(ResolverTest, Async_BadQuery) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -2329,7 +2329,7 @@ TEST_F(ResolverTest, Async_BadQuery) {
             {-1, "as65ass46", ns_t_aaaa, 0},
             {-1, "454564564564", ns_t_aaaa, 0},
             {-1, "h645235", ns_t_a, 0},
-            {-1, "www.google.com", ns_t_a, 0},
+            {-1, "www.quant.com", ns_t_a, 0},
     };
 
     for (auto& td : kTestData) {
@@ -2351,7 +2351,7 @@ TEST_F(ResolverTest, Async_BadQuery) {
 
 TEST_F(ResolverTest, Async_EmptyAnswer) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quant.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -2369,21 +2369,21 @@ TEST_F(ResolverTest, Async_EmptyAnswer) {
     // Wait on the condition variable to ensure that the DNS server has handled our first query.
     {
         std::unique_lock lk(cvMutex);
-        fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_aaaa, 0);
+        fd1 = resNetworkQuery(TEST_NETID, "howdy.quant.com", ns_c_in, ns_t_aaaa, 0);
         EXPECT_TRUE(fd1 != -1);
         EXPECT_EQ(std::cv_status::no_timeout, cv.wait_for(lk, std::chrono::seconds(1)));
     }
 
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, 0, "howdy.example.com", {"::1.2.3.4"});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, 0, "howdy.quand.com", {"::1.2.3.4"});
     dns.setResponseProbability(0.0);
 
-    int fd2 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    int fd2 = resNetworkQuery(TEST_NETID, "howdy.quant.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd2 != -1);
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.example.com", {});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.quant.com", {});
 
-    int fd3 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    int fd3 = resNetworkQuery(TEST_NETID, "howdy.quant.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd3 != -1);
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.example.com", {});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.quant.com", {});
 
     uint8_t buf[MAXPACKET] = {};
     int rcode;
@@ -2399,9 +2399,9 @@ TEST_F(ResolverTest, Async_EmptyAnswer) {
 
     dns.setResponseProbability(1.0);
 
-    int fd4 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    int fd4 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd4 != -1);
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, 0, "howdy.example.com", {"1.2.3.4"});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, 0, "howdy.quand.com", {"1.2.3.4"});
 
     memset(buf, 0, MAXPACKET);
     res = getAsyncResponse(fd4, &rcode, buf, MAXPACKET);
@@ -2416,7 +2416,7 @@ TEST_F(ResolverTest, Async_EmptyAnswer) {
 
 TEST_F(ResolverTest, Async_MalformedQuery) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -2455,7 +2455,7 @@ TEST_F(ResolverTest, Async_MalformedQuery) {
         EXPECT_EQ(static_cast<int>(ntohl(tmp)), td.expectErr);
     }
     // Normal query with answer buffer
-    // This is raw data of query "howdy.example.com" type 1 class 1
+    // This is raw data of query "howdy.quand.com" type 1 class 1
     std::string query = "81sBAAABAAAAAAAABWhvd2R5B2V4YW1wbGUDY29tAAABAAE=";
     std::string cmd = "resnsend " + std::to_string(TEST_NETID) + " 0 " + query + '\0';
     ssize_t rc = TEMP_FAILURE_RETRY(write(fd, cmd.c_str(), cmd.size()));
@@ -2478,9 +2478,9 @@ TEST_F(ResolverTest, Async_MalformedQuery) {
 
 TEST_F(ResolverTest, Async_CacheFlags) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name1[] = "howdy.example.com.";
-    constexpr char host_name2[] = "howdy.example2.com.";
-    constexpr char host_name3[] = "howdy.example3.com.";
+    constexpr char host_name1[] = "howdy.quand.com.";
+    constexpr char host_name2[] = "howdy.quand2.com.";
+    constexpr char host_name3[] = "howdy.quand3.com.";
     const std::vector<DnsRecord> records = {
             {host_name1, ns_type::ns_t_a, "1.2.3.4"}, {host_name1, ns_type::ns_t_aaaa, "::1.2.3.4"},
             {host_name2, ns_type::ns_t_a, "1.2.3.5"}, {host_name2, ns_type::ns_t_aaaa, "::1.2.3.5"},
@@ -2493,13 +2493,13 @@ TEST_F(ResolverTest, Async_CacheFlags) {
     ASSERT_TRUE(mDnsClient.SetResolversForNetwork(servers));
 
     // ANDROID_RESOLV_NO_CACHE_STORE
-    int fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    int fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                               ANDROID_RESOLV_NO_CACHE_STORE);
     EXPECT_TRUE(fd1 != -1);
-    int fd2 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    int fd2 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                               ANDROID_RESOLV_NO_CACHE_STORE);
     EXPECT_TRUE(fd2 != -1);
-    int fd3 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    int fd3 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                               ANDROID_RESOLV_NO_CACHE_STORE);
     EXPECT_TRUE(fd3 != -1);
 
@@ -2512,7 +2512,7 @@ TEST_F(ResolverTest, Async_CacheFlags) {
 
     // Raise a query with no flags to ensure no cache exists. Also make an cache entry for the
     // query.
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
 
     EXPECT_TRUE(fd1 != -1);
 
@@ -2523,7 +2523,7 @@ TEST_F(ResolverTest, Async_CacheFlags) {
 
     // Now we have the cache entry, re-query with ANDROID_RESOLV_NO_CACHE_STORE to ensure
     // that ANDROID_RESOLV_NO_CACHE_STORE implied ANDROID_RESOLV_NO_CACHE_LOOKUP.
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                           ANDROID_RESOLV_NO_CACHE_STORE);
     EXPECT_TRUE(fd1 != -1);
     expectAnswersValid(fd1, AF_INET, "1.2.3.4");
@@ -2532,9 +2532,9 @@ TEST_F(ResolverTest, Async_CacheFlags) {
     EXPECT_EQ(5U, GetNumQueries(dns, host_name1));
 
     // ANDROID_RESOLV_NO_CACHE_LOOKUP
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                           ANDROID_RESOLV_NO_CACHE_LOOKUP);
-    fd2 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    fd2 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                           ANDROID_RESOLV_NO_CACHE_LOOKUP);
 
     EXPECT_TRUE(fd1 != -1);
@@ -2547,7 +2547,7 @@ TEST_F(ResolverTest, Async_CacheFlags) {
     EXPECT_EQ(7U, GetNumQueries(dns, host_name1));
 
     // Re-query verify cache works
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd1 != -1);
     expectAnswersValid(fd1, AF_INET, "1.2.3.4");
 
@@ -2557,9 +2557,9 @@ TEST_F(ResolverTest, Async_CacheFlags) {
     // Start to verify if ANDROID_RESOLV_NO_CACHE_LOOKUP does write response into cache
     dns.clearQueries();
 
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example2.com", ns_c_in, ns_t_aaaa,
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand2.com", ns_c_in, ns_t_aaaa,
                           ANDROID_RESOLV_NO_CACHE_LOOKUP);
-    fd2 = resNetworkQuery(TEST_NETID, "howdy.example2.com", ns_c_in, ns_t_aaaa,
+    fd2 = resNetworkQuery(TEST_NETID, "howdy.quand2.com", ns_c_in, ns_t_aaaa,
                           ANDROID_RESOLV_NO_CACHE_LOOKUP);
 
     EXPECT_TRUE(fd1 != -1);
@@ -2572,8 +2572,8 @@ TEST_F(ResolverTest, Async_CacheFlags) {
     EXPECT_EQ(2U, GetNumQueries(dns, host_name2));
 
     // Re-query without flags
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example2.com", ns_c_in, ns_t_aaaa, 0);
-    fd2 = resNetworkQuery(TEST_NETID, "howdy.example2.com", ns_c_in, ns_t_aaaa, 0);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand2.com", ns_c_in, ns_t_aaaa, 0);
+    fd2 = resNetworkQuery(TEST_NETID, "howdy.quand2.com", ns_c_in, ns_t_aaaa, 0);
 
     EXPECT_TRUE(fd1 != -1);
     EXPECT_TRUE(fd2 != -1);
@@ -2587,29 +2587,29 @@ TEST_F(ResolverTest, Async_CacheFlags) {
     // Test both ANDROID_RESOLV_NO_CACHE_STORE and ANDROID_RESOLV_NO_CACHE_LOOKUP are set
     dns.clearQueries();
 
-    // Make sure that the cache of "howdy.example3.com" exists.
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example3.com", ns_c_in, ns_t_aaaa, 0);
+    // Make sure that the cache of "howdy.quand3.com" exists.
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand3.com", ns_c_in, ns_t_aaaa, 0);
     EXPECT_TRUE(fd1 != -1);
     expectAnswersValid(fd1, AF_INET6, "::1.2.3.6");
     EXPECT_EQ(1U, GetNumQueries(dns, host_name3));
 
     // Re-query with testFlags
     const int testFlag = ANDROID_RESOLV_NO_CACHE_STORE | ANDROID_RESOLV_NO_CACHE_LOOKUP;
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example3.com", ns_c_in, ns_t_aaaa, testFlag);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand3.com", ns_c_in, ns_t_aaaa, testFlag);
     EXPECT_TRUE(fd1 != -1);
     expectAnswersValid(fd1, AF_INET6, "::1.2.3.6");
     // Expect cache lookup is skipped.
     EXPECT_EQ(2U, GetNumQueries(dns, host_name3));
 
     // Do another query with testFlags
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example3.com", ns_c_in, ns_t_a, testFlag);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand3.com", ns_c_in, ns_t_a, testFlag);
     EXPECT_TRUE(fd1 != -1);
     expectAnswersValid(fd1, AF_INET, "1.2.3.6");
     // Expect cache lookup is skipped.
     EXPECT_EQ(3U, GetNumQueries(dns, host_name3));
 
     // Re-query with no flags
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example3.com", ns_c_in, ns_t_a, 0);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand3.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd1 != -1);
     expectAnswersValid(fd1, AF_INET, "1.2.3.6");
     // Expect no cache hit because cache storing is also skipped in previous query.
@@ -2618,7 +2618,7 @@ TEST_F(ResolverTest, Async_CacheFlags) {
 
 TEST_F(ResolverTest, Async_NoCacheStoreFlagDoesNotRefreshStaleCacheEntry) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
     };
@@ -2634,7 +2634,7 @@ TEST_F(ResolverTest, Async_NoCacheStoreFlagDoesNotRefreshStaleCacheEntry) {
     // Refer to b/148842821 for the purpose of below test steps.
     // Basically, this test is used to ensure stale cache case is handled
     // correctly with ANDROID_RESOLV_NO_CACHE_STORE.
-    int fd = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    int fd = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd != -1);
     expectAnswersValid(fd, AF_INET, "1.2.3.4");
 
@@ -2647,7 +2647,7 @@ TEST_F(ResolverTest, Async_NoCacheStoreFlagDoesNotRefreshStaleCacheEntry) {
     // Now request the same hostname again.
     // We should see a new DNS query because the entry in cache has become stale.
     // Due to ANDROID_RESOLV_NO_CACHE_STORE, this query must *not* refresh that stale entry.
-    fd = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    fd = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                          ANDROID_RESOLV_NO_CACHE_STORE);
     EXPECT_TRUE(fd != -1);
     expectAnswersValid(fd, AF_INET, "1.2.3.4");
@@ -2656,7 +2656,7 @@ TEST_F(ResolverTest, Async_NoCacheStoreFlagDoesNotRefreshStaleCacheEntry) {
 
     // If the cache is still stale, we expect to see one more DNS query
     // (this time the cache will be refreshed, but we're not checking for it).
-    fd = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    fd = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd != -1);
     expectAnswersValid(fd, AF_INET, "1.2.3.4");
     EXPECT_EQ(1U, GetNumQueries(dns, host_name));
@@ -2665,7 +2665,7 @@ TEST_F(ResolverTest, Async_NoCacheStoreFlagDoesNotRefreshStaleCacheEntry) {
 TEST_F(ResolverTest, Async_NoRetryFlag) {
     constexpr char listen_addr0[] = "127.0.0.4";
     constexpr char listen_addr1[] = "127.0.0.6";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -2683,19 +2683,19 @@ TEST_F(ResolverTest, Async_NoRetryFlag) {
     dns0.setResponseProbability(0.0);
     dns1.setResponseProbability(0.0);
 
-    int fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a,
+    int fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a,
                               ANDROID_RESOLV_NO_RETRY);
     EXPECT_TRUE(fd1 != -1);
 
-    int fd2 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_aaaa,
+    int fd2 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_aaaa,
                               ANDROID_RESOLV_NO_RETRY);
     EXPECT_TRUE(fd2 != -1);
 
     // expect no response
     expectAnswersNotValid(fd1, -ETIMEDOUT);
     expectAnswersNotValid(fd2, -ETIMEDOUT);
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.example.com", {});
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.example.com", {});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.quand.com", {});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.quand.com", {});
 
     // No retry case, expect total 2 queries. The server is selected randomly.
     EXPECT_EQ(2U, GetNumQueries(dns0, host_name) + GetNumQueries(dns1, host_name));
@@ -2703,17 +2703,17 @@ TEST_F(ResolverTest, Async_NoRetryFlag) {
     dns0.clearQueries();
     dns1.clearQueries();
 
-    fd1 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_a, 0);
+    fd1 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_a, 0);
     EXPECT_TRUE(fd1 != -1);
 
-    fd2 = resNetworkQuery(TEST_NETID, "howdy.example.com", ns_c_in, ns_t_aaaa, 0);
+    fd2 = resNetworkQuery(TEST_NETID, "howdy.quand.com", ns_c_in, ns_t_aaaa, 0);
     EXPECT_TRUE(fd2 != -1);
 
     // expect no response
     expectAnswersNotValid(fd1, -ETIMEDOUT);
     expectAnswersNotValid(fd2, -ETIMEDOUT);
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.example.com", {});
-    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.example.com", {});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.quand.com", {});
+    ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, RCODE_TIMEOUT, "howdy.quand.com", {});
 
     // Retry case, expect 4 queries
     EXPECT_EQ(4U, GetNumQueries(dns0, host_name));
@@ -2722,7 +2722,7 @@ TEST_F(ResolverTest, Async_NoRetryFlag) {
 
 TEST_F(ResolverTest, Async_VerifyQueryID) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -4349,7 +4349,7 @@ TEST_F(ResolverTest, BlockDnsQueryWithUidRule) {
     SKIP_IF_BPF_NOT_SUPPORTED;
     constexpr char listen_addr1[] = "127.0.0.4";
     constexpr char listen_addr2[] = "::1";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -4382,8 +4382,8 @@ TEST_F(ResolverTest, BlockDnsQueryWithUidRule) {
     if (isAtLeastR) {
         EXPECT_EQ(res2, -ECONNREFUSED);
         EXPECT_EQ(res1, -ECONNREFUSED);
-        ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, EAI_SYSTEM, "howdy.example.com", {});
-        ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, EAI_SYSTEM, "howdy.example.com", {});
+        ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, EAI_SYSTEM, "howdy.quand.com", {});
+        ExpectDnsEvent(INetdEventListener::EVENT_RES_NSEND, EAI_SYSTEM, "howdy.quand.com", {});
     } else {
         EXPECT_GT(res2, 0);
         EXPECT_EQ("::1.2.3.4", toString(buf2, res2, AF_INET6));
@@ -4399,7 +4399,7 @@ TEST_F(ResolverTest, GetAddrinfo_BlockDnsQueryWithUidRule) {
     SKIP_IF_BPF_NOT_SUPPORTED;
     constexpr char listen_addr1[] = "127.0.0.4";
     constexpr char listen_addr2[] = "::1";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -4451,7 +4451,7 @@ TEST_F(ResolverTest, EnforceDnsUid) {
     SKIP_IF_BPF_NOT_SUPPORTED;
     constexpr char listen_addr1[] = "127.0.0.4";
     constexpr char listen_addr2[] = "::1";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_a, "1.2.3.4"},
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
@@ -5902,7 +5902,7 @@ TEST_P(ResolverParameterizedTest, TruncatedResponse) {
 TEST_F(ResolverTest, KeepListeningUDP) {
     constexpr char listen_addr1[] = "127.0.0.4";
     constexpr char listen_addr2[] = "127.0.0.5";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     const std::vector<DnsRecord> records = {
             {host_name, ns_type::ns_t_aaaa, "::1.2.3.4"},
     };
@@ -5943,7 +5943,7 @@ TEST_F(ResolverTest, KeepListeningUDP) {
 
 TEST_F(ResolverTest, GetAddrInfoParallelLookupTimeout) {
     constexpr char listen_addr[] = "127.0.0.4";
-    constexpr char host_name[] = "howdy.example.com.";
+    constexpr char host_name[] = "howdy.quand.com.";
     constexpr int TIMING_TOLERANCE_MS = 200;
     constexpr int DNS_TIMEOUT_MS = 1000;
     const std::vector<DnsRecord> records = {
